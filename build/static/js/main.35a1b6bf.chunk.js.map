{"version":3,"sources":["Api.js","Home.js","NovaSerie.js","Series.js","EditaSerie.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","apis","loadGenres","get","saveSeries","newSeries","post","loadSeriesByGenre","genre","deleteSeries","id","delete","loadSeriesById","updateSeries","serie","put","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","genres","isLoading","_this2","setState","then","res","data","react_default","a","createElement","key","Link","to","concat","className","src","alt","map","renderGenreLink","Component","statusEnum","watched","watching","toWatch","NovaSerie","redirect","salvar","bind","assertThisInitialized","_this3","name","refs","nome","value","status","genero","comments","comentario","Redirect","type","ref","keys","onClick","Series","series","renderSeries","loadData","match","params","_this4","length","EditaSerie","defaultValue","Sobre","App","BrowserRouter","role","href","height","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35a1b6bf.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst api = axios.create({\n    baseURL: 'http://localhost:3001'\n})\n\nconst apis = {\n    loadGenres: () => api.get('genres'),\n    saveSeries: (newSeries) => api.post('series', newSeries),\n    loadSeriesByGenre: (genre) => api.get('series?genre='+genre),\n    deleteSeries: (id) => api.delete('series/'+id),\n    loadSeriesById: (id) => api.get('series/'+id),\n    updateSeries: (serie) => api.put('series/'+serie.id, serie)\n}\n\nexport default apis","import React, { Component } from 'react'\nimport {\n    Link\n  } from 'react-router-dom'\nimport api from './Api'\n\nclass Home extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n          genres: [],\n          isLoading: false\n        }\n    }\n\n    componentDidMount(){\n        this.setState({ isLoading: true })\n        \n        api.loadGenres()\n            .then((res) => {\n            this.setState({\n                isLoading: false,\n                genres: res.data\n            })\n        })\n    }\n    \n    renderGenreLink(genre) {\n        return (\n            <span key={genre}>&nbsp;<Link to={`/series/${genre}`}>{genre}</Link></span>\n        )\n    }\n\n    render(){\n        return(\n            <div>\n                <section id=\"intro\" className=\"intro-section\">\n                    <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-12\">\n                        <h1><img src=\"images/logo.png\" alt=\"\" /></h1>\n                        <p>Nunca mais esqueça uma série que você assistiu ou que alguém lhe indicou.</p>\n                        </div>\n                    </div>\n                    </div>\n                </section>\n                <section>\n                    <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-12\">\n                        {\n                            this.state.isLoading &&\n                            <center>Carregando...</center>\n                        }\n                        {\n                            !this.state.isLoading &&\n                            <div>\n                            Ver séries do gênero:\n                            {\n                                (this.state.genres.map(this.renderGenreLink))\n                            }\n                            </div>\n                        }\n                        </div>\n                    </div>\n                    </div>\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default Home","import React, { Component } from 'react'\nimport api from './Api'\nimport { Redirect } from 'react-router-dom'\n\nconst statusEnum = {\n    'watched': 'Assistido',\n    'watching': 'Assistindo',\n    'toWatch': 'Assistir'\n}\n\nclass NovaSerie extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n          genres: [],\n          isLoading: false,\n          redirect: false\n        }\n\n        this.salvar = this.salvar.bind(this)\n    }\n\n    componentDidMount(){\n        this.setState({ isLoading: true })\n        \n        api.loadGenres()\n            .then((res) => {\n            this.setState({\n                isLoading: false,\n                genres: res.data\n            })\n        })\n    }\n\n    salvar(){\n        const newSeries = {\n            name: this.refs.nome.value,\n            status: this.refs.status.value,\n            genre: this.refs.genero.value,\n            comments: this.refs.comentario.value\n        }\n        \n        api.saveSeries(newSeries)\n            .then((res) => {\n                this.setState({ \n                    redirect: '/series/'+this.refs.genero.value \n                })\n            })\n    }\n\n    render(){\n        return (\n            <section className=\"intro-section\">\n                {  \n                    this.state.redirect && \n                    <Redirect to={this.state.redirect} />\n                }\n                <h1>Nova Série</h1>\n                <form>\n                    Nome: <input type=\"text\" ref='nome' className=\"form-control\" /> <br />\n                    Status: \n                    <select ref='status'>\n                        { Object\n                            .keys(statusEnum)\n                            .map(key => <option key={key} value={key}>{statusEnum[key]}</option>)\n                        }\n                    </select> <br />\n                    Gênero: \n                    <select ref='genero'>\n                        { this.state.genres\n                            .map(key => <option key={key} value={key}>{key}</option>)\n                        }\n                    </select> <br />\n                    Comentários: <textarea ref='comentario' className=\"form-control\" ></textarea> <br />\n                    <button type='button' onClick={this.salvar}>Salvar</button>\n                </form>\n            </section>\n        )\n    }\n}\n\nexport default NovaSerie","import React, { Component } from 'react'\nimport api from './Api'\nimport { Link } from 'react-router-dom'\n\nconst statusEnum = {\n    'watched': 'Assistido',\n    'watching': 'Assistindo',\n    'toWatch': 'Assistir'\n}\n\nclass Series extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n          series: [],\n          isLoading: false\n        }\n\n        this.renderSeries = this.renderSeries.bind(this)\n        this.loadData = this.loadData.bind(this)\n    }\n\n    componentDidMount(){\n        this.loadData()\n    }\n\n    loadData(){\n        this.setState({ isLoading: true })\n        \n        api.loadSeriesByGenre(this.props.match.params.genre)\n            .then((res) => {\n            this.setState({\n                isLoading: false,\n                series: res.data\n            })\n        })\n    }\n\n    deleteSeries(id){\n        api.deleteSeries(id).then((res) => this.loadData())\n    }\n\n    renderSeries(series){\n        return (\n            <div key={series.id} className=\"item col-xs-4 col-lg-4\">\n                <div className=\"thumbnail\">\n                    <img className=\"group list-group-image\" src=\"http://placehold.it/400x250/000/fff\" alt=\"\" />\n                    <div className=\"caption\">\n                        <h4 className=\"group inner list-group-item-heading\">\n                            {series.name}</h4>\n                        <div className=\"row\">\n                            <div className=\"col-xs-12 col-md-12\">\n                                <p className=\"lead\">{series.genre} / {statusEnum[series.status]}</p>\n                            </div>\n                            <div className=\"col-xs-12 col-md-12\">\n                                <Link className=\"btn btn-success\" to={'/series-editar/'+series.id}>Editar</Link>\n                                <a className=\"btn btn-danger\" onClick={() => this.deleteSeries(series.id)}>Excluir</a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    render(){\n        return (\n            <section id=\"intro\" className=\"intro-section\">\n                <h1>Série {this.props.match.params.genre}</h1>\n                { \n                    this.state.isLoading && \n                    <p>Carregando, aguarde...</p>\n                }\n                {\n                    this.state.series.length === 0 &&\n                    <div className='alert alert-danger'>Nenhuma série de {this.props.match.params.genre} encontrada</div>\n                }\n                <div id=\"series\" className=\"row list-group\">\n                    {\n                        !this.state.isLoading &&\n                        this.state.series.map(this.renderSeries)\n                    }\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Series","import React, { Component } from 'react'\nimport api from './Api'\nimport { Redirect } from 'react-router-dom'\n\nconst statusEnum = {\n    'watched': 'Assistido',\n    'watching': 'Assistindo',\n    'toWatch': 'Assistir'\n}\n\nclass EditaSerie extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n          genres: [],\n          isLoading: false,\n          redirect: false,\n          serie: {}\n        }\n\n        this.salvar = this.salvar.bind(this)\n    }\n\n    componentDidMount(){\n        this.setState({ isLoading: true })\n\n        api.loadSeriesById(this.props.match.params.id)\n            .then((res) => {\n                this.setState({\n                    serie: res.data\n                })\n                this.refs.nome.value = this.state.serie.name\n                this.refs.comentario.value = this.state.serie.comments\n                this.refs.genero.value = this.state.serie.genre\n                this.refs.status.value = this.state.serie.status\n            })\n        \n        api.loadGenres()\n            .then((res) => {\n            this.setState({\n                isLoading: false,\n                genres: res.data\n            })\n        })\n    }\n\n    salvar(){\n        const newSeries = {\n            id: this.props.match.params.id,\n            name: this.refs.nome.value,\n            status: this.refs.status.value,\n            genre: this.refs.genero.value,\n            comments: this.refs.comentario.value\n        }\n        \n        api.updateSeries(newSeries)\n            .then((res) => {\n                this.setState({ \n                    redirect: '/series/'+this.refs.genero.value \n                })\n            })\n    }\n\n    render(){\n        return (\n            <section className=\"intro-section\">\n                {  \n                    this.state.redirect && \n                    <Redirect to={this.state.redirect} />\n                }\n                <h1>Editar Série</h1>\n                <form>\n                    Nome: <input type=\"text\" ref='nome' className=\"form-control\" /> <br />\n                    Status: \n                    <select ref='status'>\n                        { Object\n                            .keys(statusEnum)\n                            .map(key => <option key={key} value={key}>{statusEnum[key]}</option>)\n                        }\n                    </select> <br />\n                    Gênero: \n                    <select ref='genero'>\n                        { this.state.genres\n                            .map(key => <option key={key} value={key}>{key}</option>)\n                        }\n                    </select> <br />\n                    Comentários: <textarea defaultValue={this.state.serie.name} ref='comentario' className=\"form-control\" ></textarea> <br />\n                    <button type='button' onClick={this.salvar}>Salvar</button>\n                </form>\n            </section>\n        )\n    }\n}\n\nexport default EditaSerie","import React, { Component } from 'react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport Home from './Home'\nimport NovaSerie from './NovaSerie'\nimport Series from './Series'\nimport EditaSerie from './EditaSerie'\n\nconst Sobre = () => <section className=\"intro-section\"><h1>Sobre</h1></section>\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <nav className=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n            <div className=\"container\">\n              <div className=\"navbar-header page-scroll\">\n                <a className=\"navbar-brand page-scroll\" href=\"#page-top\">\n                    <img src=\"/images/logo.png\" height=\"30\" alt=\"\" />\n                </a>\n              </div>\n\n              <div className=\"collapse navbar-collapse navbar-ex1-collapse\">\n                <ul className=\"nav navbar-nav\">\n                  <li>\n                    <Link to='/'>Home</Link>\n                  </li>\n                  <li>\n                    <Link to='/nova'>Nova Série</Link>\n                  </li>\n                  <li>\n                    <Link to='/sobre'>Sobre</Link>\n                  </li>\n                </ul>\n              </div>\n\n            </div>\n          </nav>\n          <Route exact path='/' component={Home} />\n          <Route path='/series-editar/:id' component={EditaSerie} />\n          <Route path='/series/:genre' component={Series} />\n          <Route exact path='/nova' component={NovaSerie} />\n          <Route exact path='/sobre' component={Sobre} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}